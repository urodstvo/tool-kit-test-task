/** @generated THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */
import * as Types from '../../../shared/api/graphql.gen';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {} as const;
export type ViewerRepoQueryVariables = Types.Exact<{
  first?: Types.InputMaybe<Types.Scalars['Int']['input']>;
  last?: Types.InputMaybe<Types.Scalars['Int']['input']>;
  before?: Types.InputMaybe<Types.Scalars['String']['input']>;
  after?: Types.InputMaybe<Types.Scalars['String']['input']>;
  privacy?: Types.InputMaybe<Types.RepositoryPrivacy>;
}>;


export type ViewerRepoQuery = { __typename?: 'Query', viewer: { __typename?: 'User', repositories: { __typename?: 'RepositoryConnection', totalCount: number, nodes?: Array<{ __typename?: 'Repository', id: string, name: string, nameWithOwner: string, stargazerCount: number, url: any, defaultBranchRef?: { __typename?: 'Ref', target?: { __typename?: 'Blob' } | { __typename?: 'Commit', history: { __typename?: 'CommitHistoryConnection', edges?: Array<{ __typename?: 'CommitEdge', node?: { __typename?: 'Commit', committedDate: any } | null } | null> | null } } | { __typename?: 'Tag' } | { __typename?: 'Tree' } | null } | null } | null> | null, pageInfo: { __typename?: 'PageInfo', hasNextPage: boolean, hasPreviousPage: boolean, startCursor?: string | null, endCursor?: string | null } } } };


export const ViewerRepoDocument = gql`
    query viewerRepo($first: Int, $last: Int, $before: String, $after: String, $privacy: RepositoryPrivacy) {
  viewer {
    repositories(
      first: $first
      last: $last
      after: $after
      before: $before
      privacy: $privacy
    ) {
      totalCount
      nodes {
        id
        name
        nameWithOwner
        stargazerCount
        url
        defaultBranchRef {
          target {
            ... on Commit {
              history(first: 1) {
                edges {
                  node {
                    ... on Commit {
                      committedDate
                    }
                  }
                }
              }
            }
          }
        }
      }
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
    }
  }
}
    `;

/**
 * __useViewerRepoQuery__
 *
 * To run a query within a React component, call `useViewerRepoQuery` and pass it any options that fit your needs.
 * When your component renders, `useViewerRepoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerRepoQuery({
 *   variables: {
 *      first: // value for 'first'
 *      last: // value for 'last'
 *      before: // value for 'before'
 *      after: // value for 'after'
 *      privacy: // value for 'privacy'
 *   },
 * });
 */
export function useViewerRepoQuery(baseOptions?: Apollo.QueryHookOptions<ViewerRepoQuery, ViewerRepoQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ViewerRepoQuery, ViewerRepoQueryVariables>(ViewerRepoDocument, options);
      }
export function useViewerRepoLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerRepoQuery, ViewerRepoQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ViewerRepoQuery, ViewerRepoQueryVariables>(ViewerRepoDocument, options);
        }
export function useViewerRepoSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<ViewerRepoQuery, ViewerRepoQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<ViewerRepoQuery, ViewerRepoQueryVariables>(ViewerRepoDocument, options);
        }
export type ViewerRepoQueryHookResult = ReturnType<typeof useViewerRepoQuery>;
export type ViewerRepoLazyQueryHookResult = ReturnType<typeof useViewerRepoLazyQuery>;
export type ViewerRepoSuspenseQueryHookResult = ReturnType<typeof useViewerRepoSuspenseQuery>;
export type ViewerRepoQueryResult = Apollo.QueryResult<ViewerRepoQuery, ViewerRepoQueryVariables>;